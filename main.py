import re
import telebot

from bot import CalculatorBot

from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from keyboa import Keyboa
from res import BOT_TOKEN

users = {}

# keyboard_start = telebot.types.ReplyKeyboardMarkup(True, True)
#
# keyboard_subject = telebot.types.ReplyKeyboardMarkup(True, True)
#
# keyboard_achievement = telebot.types.ReplyKeyboardMarkup(True, True)
#
# keyboard_search = telebot.types.ReplyKeyboardMarkup(True, True)

bot = telebot.TeleBot(BOT_TOKEN)


def add_point(mess):
    if mess.text.startswith('/'):
        eval(mess.text[1:])(mess)
        return
    if re.search(r'[–∞-—è–ê-–Ø]+ *- *\d{2}', mess.text):
        sub_point = re.split(r' *- *', mess.text)
        if users[mess.chat.id].new_search.add_point(*sub_point):
            bot.send_message(mess.chat.id, '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ')
        else:
            bot.send_message(mess.chat.id, '‚ùå –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.')
    else:
        bot.send_message(mess.chat.id, '‚ùó–í—ã –æ—à–∏–±–ª–∏—Å—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞')
    bot.register_next_step_handler(mess, add_point)


def create_user_request(chat_id):
    users[chat_id] = CalculatorBot()


@bot.message_handler(commands=['new_request'])
def new_request(message):
    users[message.chat.id].new_request()
    bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã, –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ')


@bot.message_handler(commands=['start'])
def start(message):
    create_user_request(message.chat.id)
    users[message.chat.id].start()
    mess = f'üëãüèª –ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤—É–∑.\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:'
    bot.send_message(message.chat.id, mess, parse_mode='html')
    help(message)


@bot.message_handler(commands=['help'])
def help(message):
    commands = f''' \n‚Ñπ /help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
                    \nüî† /subject - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏ –±–∞–ª–ª –∑–∞ –ï–ì–≠
                    \nüèÜ /achievement - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                    \nüîé /search - –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤—É–∑
                    \nüÜï /new_request - –Ω–∞–π—Ç–∏ –≤—É–∑ –ø–æ –Ω–æ–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
                    \nüèô /place - –≤—ã–±—Ä–∞—Ç—å —Å—É–±—ä–µ–∫—Ç –†–§
                    '''
    bot.send_message(message.chat.id, commands, parse_mode='html')


@bot.message_handler(commands=['direction'])
def direction(message):
    pass


@bot.message_handler(commands=['place'])
def place(message, n=0, edit_flag=True):
    with open('places_with_code.txt', 'r') as file:
        all_places = [{locality.strip(): code} for code, locality in (row.split(':') for row in file)]
    if n + 10 > len(all_places):
        items = [{'‚è™ –ù–∞–∑–∞–¥': f'back-{n - 10}'}]

    elif n < 10:
        items = [{'–í–ø–µ—Ä—ë–¥ ‚è©': f'next-{n + 10}'}]
    else:
        items = [{'‚è™ –ù–∞–∑–∞–¥': f'back-{n - 10}'}, {'–í–ø–µ—Ä—ë–¥ ‚è©': f'next-{n + 10}'}]

    keyboard_flipping = Keyboa(items=items, items_in_row=2).keyboard
    mess = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—É–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–º–∏'
    kb_places = Keyboa(items=all_places[n:n + 10], items_in_row=2).keyboard
    keyboard = Keyboa.combine(keyboards=(kb_places, keyboard_flipping))
    if edit_flag:
        res = bot.send_message(message.from_user.id, text=mess,
                               reply_markup=keyboard)
        users[message.from_user.id].message_id = res.id
    else:
        bot.edit_message_text(text=mess, chat_id=message.from_user.id,
                              message_id=users[message.from_user.id].message_id,
                              reply_markup=keyboard)


@bot.message_handler(commands=['subject'])
def subject(message):
    users[message.chat.id].get_subject()
    mess = f'–ß—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –±–∞–ª–ª—ã –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –∞ –∑–∞ —Ç–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –±–∞–ª–ª –ï–ì–≠' \
           f'\n\n<u>–í–æ—Ç –ø—Ä–∏–º–µ—Ä</u>:\n<b>–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - 90</b>\n\n' \
           f'<u>C–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:</u>\n<b>{users[message.chat.id].subjects}</b>'
    bot.send_message(message.chat.id, mess, parse_mode='html')
    bot.register_next_step_handler(message, add_point)


def add_achievement(message):
    if message.text.startswith('/'):
        eval(message.text[1:])(message)
        return
    if users[message.chat.id].new_search.add_flag(message.text):
        bot.send_message(message.chat.id, '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ')
    else:
        bot.send_message(message.chat.id, '‚ùå –í—ã –æ—à–∏–±–ª–∏—Å—å')
    bot.register_next_step_handler(message, add_achievement)


@bot.message_handler(commands=['achievement'])
def achievement(message):
    mess = f'''–ß—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, —É–∫–∞–∂–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ —Ç—Ä—ë—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:
    \nü•á –ú–µ–¥–∞–ª—å\nüèÉ –ì–¢–û\nü§ùüèº –í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ '''
    bot.send_message(message.chat.id, mess, parse_mode='html')
    bot.register_next_step_handler(message, add_achievement)


@bot.message_handler(commands=['search'])
def search(message, n=0):
    if not users[message.from_user.id].response_status:
        users[message.from_user.id].get_active_subject()
        mess = f'‚è≥<b>–ü–æ–∏—Å–∫ –≤—É–∑–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:</b>\n\n<b>–ü—Ä–µ–¥–º–µ—Ç—ã:</b>'
        for i in users[message.from_user.id].active_subject:
            mess += "\n" + ' - '.join(i)
        users[message.from_user.id].get_active_achievement()
        mess += '\n\n<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>'
        for i in users[message.from_user.id].active_achievement:
            mess += '\n' + "".join(i)
        bot.send_message(message.from_user.id, mess, parse_mode='html')
        users[message.from_user.id].search()
        users[message.from_user.id].response_status = True
    mess = users[message.from_user.id].show_search_result(n)
    if not mess:
        users[message.from_user.id].response_status = False
        bot.send_message(message.from_user.id, users[message.from_user.id].search_result)
        bot.register_next_step_handler(message, add_point)
    else:
        if mess[0]:
            for i in mess[0]:
                bot_mess = f'üè´ <b>{i[0]}</b>\n\n<u>‚û° –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</u>\n<b>{i[1]}</b>\n\n' \
                           f'üéì <u>–ü—Ä–æ—Ñ–∏–ª—å:</u>\n<b>{i[2]}</b>\n\n' \
                           f'üß© <u>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</u>\n<b>{i[3]}</b>\n\n' \
                           f'üî¢ <u>–ö–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</u>\n<b>{i[4]}</b>\n\n' \
                           f'üíØ <u>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª –≤ –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É:</u>\n<b>{i[5]}</b>'
                bot.send_message(message.from_user.id, bot_mess, parse_mode='html')
                bot.send_photo(message.from_user.id, open(f'image/{i[0]}.png', 'rb'))
                n += 1
            if not mess[1]:
                btn_more = InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë', callback_data=str(n))
                inline_kb1 = InlineKeyboardMarkup().add(btn_more)
                bot.send_message(message.from_user.id, '–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ—â—ë, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:',
                                 reply_markup=inline_kb1)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if re.match(r'^\d{4}', call.data):
        users[call.from_user.id].new_search.open_places_console()
        users[call.from_user.id].add_place(call.data)
    elif call.data[:4] == 'next':
        place(call, int(call.data[5:]), False)
    elif call.data[:4] == 'back':
        place(call, int(call.data[5:]), False)
    else:
        search(call, int(call.data))


bot.infinity_polling()
